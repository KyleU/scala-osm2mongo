package osm2mongo

import scala.xml.pull._
import scala.io.Source
import java.io.File
import com.mongodb.casbah.commons.{ MongoDBObject => Obj, MongoDBList => ObjList }
import com.mongodb.casbah.Imports._

object OsmImporter {
  def apply(db: String, filename: String) {
    val src = Source.fromFile(new File(filename))
    val er = new XMLEventReader(src)

    val mongoDb = MongoConnection()(db)
    var numRecordsProcessed = 0;

    var current = Obj.newBuilder
    var tags = ObjList.newBuilder
    var otherColl = ObjList.newBuilder

    while (er.hasNext) {
      val e = er.next
      e match {
        case comment: EvComment => println(comment.text)
        case elem: EvElemStart => {
          val attrs = elem.attrs.asAttrMap
          if (elem.label == "node" || elem.label == "way" || elem.label == "relation") {
            current = Obj.newBuilder
            current += ("osmid" -> attrs("id").toInt)
          }
          elem.label match {
            case "node" => current += ("loc" -> ObjList(attrs("lon").toFloat, attrs("lat").toFloat))
            case "tag" => tags += Obj("k" -> attrs("k"), "v" -> attrs("v"))
            case "nd" => otherColl += attrs("ref").toInt
            case "member" => otherColl += Obj("type" -> attrs("type"), "ref" -> attrs("ref").toInt)

            case "osm" => println("Processing OSM v" + attrs("version") + " generated by " + attrs("generator") + ".")
            case "bound" => println("Importing bounds box: " + attrs("box") + ".")

            case _ =>
          }
        }
        case elem: EvElemEnd => {
          var shouldPersist = false
          elem.label match {
            case "node" => {
              shouldPersist = true
            }
            case "way" => {
              current += "nodes" -> otherColl.result
              otherColl = ObjList.newBuilder
              shouldPersist = true
            }
            case "relation" => {
              current += "members" -> otherColl.result
              otherColl = ObjList.newBuilder
              shouldPersist = true
            }
            case "osm" => println("Finished processing " + numRecordsProcessed + " records.")
            case _ =>
          }
          if (shouldPersist) {
            numRecordsProcessed += 1
            current += "tags" -> tags.result
            tags = ObjList.newBuilder
            mongoDb(elem.label).insert(current.result)
          }
        }
        case _ =>
      }
    }
  }
}